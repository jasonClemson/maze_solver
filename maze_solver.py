# -*- coding: utf-8 -*-
"""Maze solver

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cdDRb40VUm1pSsOv0GnUIdrBv5f5ztRV
"""

##Puzzle Solver
import copy

rows=7
columns=7
playerRow=0
playerCol=0
goalRow=0
goalCol=0

##puzzle=[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[2,1,1,0,1,1,3],[0,0,1,1,1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]
puzzle=[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0],
[0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0],
[0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0],
[0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 3],
[0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0],
[0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
[0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
[0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0],
[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
[0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0],
[0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0],
[0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
[0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0],
[0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0],
[2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

visited=[]
instructions=[]

def getLocations(puzzle):
  playerFound=False
  goalFound=False
  for r in range(0,len(puzzle)):
    for c in range(0,len(puzzle[r])):
      if puzzle[r][c]==2:
        playerRow=r
        playerCol=c
        playerFound=True
      if puzzle[r][c]==3:
        goalRow=r
        goalCol=c
        goalFound=True
    if goalFound and playerFound:
      break
  return playerRow,playerCol,goalRow,goalCol

temp=getLocations(puzzle)
playerRow=temp[0]
playerCol=temp[1]
goalRow=temp[2]
goalCol=temp[3]
print(str(playerRow)+" "+str(playerCol)+" "+str(goalRow)+" "+str(goalCol))

def prepVisited():
  for r in range(0,len(puzzle)):
    visited.append([])
    for c in range(0,len(puzzle[r])):
      visited[r].append(False)

prepVisited()

def analyzePath(puzzle,playerRow,playerCol,visited,goalRow,goalCol,instructions,instruction):
  instructions.append(instruction)
  if playerRow==len(puzzle) or playerRow==-1 or playerCol==len(puzzle[playerRow]) or playerCol==-1:
    return -3
  if puzzle[playerRow][playerCol]==0:
    return -2
  if puzzle[playerRow][playerCol]==3:
    instructions.append("end")
    print(instructions)
    return 1000
  if visited[playerRow][playerCol]:
    return -1
  visited[playerRow][playerCol]=True
  analyzePath(copy.deepcopy(puzzle),playerRow+1,playerCol,copy.deepcopy(visited),goalRow,goalCol,copy.deepcopy(instructions),"Down")
  analyzePath(copy.deepcopy(puzzle),playerRow-1,playerCol,copy.deepcopy(visited),goalRow,goalCol,copy.deepcopy(instructions),"Up")
  analyzePath(copy.deepcopy(puzzle),playerRow,playerCol+1,copy.deepcopy(visited),goalRow,goalCol,copy.deepcopy(instructions),"Right")
  analyzePath(copy.deepcopy(puzzle),playerRow,playerCol-1,copy.deepcopy(visited),goalRow,goalCol,copy.deepcopy(instructions),"Left")

analyzePath(puzzle,playerRow,playerCol,visited,goalRow,goalCol,instructions,"Start")